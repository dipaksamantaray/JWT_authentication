step-1=>First, create a new Laravel project. You can do this by running the following command in your terminal:
composer create-project laravel/laravel jwt-auth
Step 2: Install tymon/jwt-auth package
The tymon/jwt-auth package is widely used for JWT authentication in Laravel. Install it using Composer:
composer require tymon/jwt-auth

Step 3: Publish the JWT config
After installing the package, publish its configuration file with the following command:
php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"

Step 4: Generate JWT secret key
Generate a secret key for JWT authentication, which will be used to sign tokens. Run the command:
php artisan jwt:secret

Step 5: Configure auth.php
Next, you need to update your config/auth.php file to use JWT as the driver for API authentication. Modify the guards array as follows:

'guards' => [
    'api' => [
        'driver' => 'jwt',
        'provider' => 'users',
    ],
],

Step 6: Update User model
Add the Tymon\JWTAuth\Contracts\JWTSubject interface to your User model and implement its required methods.

In app/Models/User.php:

use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements JWTSubject
{
    // Implement JWTSubject methods
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    public function getJWTCustomClaims()
    {
        return [];
    }
}

Step 7: Create Authentication Controller
You will need to create an authentication controller to handle user login, registration, and token management.

Run this command to generate the controller:
php artisan make:controller AuthController
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Tymon\JWTAuth\Facades\JWTAuth;
use Illuminate\Support\Facades\Validator;



class AuthController extends Controller
{
     // Register a new user
     public function register(Request $request)
     {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 422);
        }
 
         $user = User::create([
             'name' => $request->name,
             'email' => $request->email,
             'password' => bcrypt($request->password),
         ]);
 
 
        //  return response()->json(compact('user', 'token'), 201);

         return response()->json([
            'user' => $user,
            'token' => $token,
        ], 201);
     }
 
     // Log in an existing user
     public function login(Request $request)
     {
         $credentials = $request->only('email', 'password');
 
         if (!$token = JWTAuth::attempt($credentials)) {
             return response()->json(['error' => 'Invalid credentials'], 401);
         }
 
         return response()->json(compact('token'));
     }
 
     // Get authenticated user
    //  public function me()
    //  {
    //      return response()->json(Auth::user());
    //  }
    public function me(Request $request)
    {
        $token = $request->bearerToken();
    //    dd($token);
        if ($token) {
            return response()->json(auth()->user());
           
        }                                    
    
        return response()->json(['error' => 'You are not logged in'], 401);
    }
    
     // Log out user
     public function logout()
     {
         Auth::logout();
         return response()->json(['message' => 'Successfully logged out']);
     }
}


Step 8: Define API routes
Now, define your authentication routes in routes/api.php:
use App\Http\Controllers\AuthController;
Route::post('register', [AuthController::class, 'register']);
Route::post('login', [AuthController::class, 'login']);
Route::middleware('auth:api')->get('me', [AuthController::class, 'me']);
Route::middleware('auth:api')->post('logout', [AuthController::class, 'logout']);
